% имя музыкального файла
FileName1='/home/logan/github/Y3S1/Image recognition methods/Labwork 3/Notes1.wav';
% ввести музыкальный сигнал
[yS1,fS1] = audioread(FileName1);
% Определение количества отсчетов в сигнале
nS1=length(yS1); % длина сигнала
% Определение длительности сигнала (с)
DurationS1=nS1/fS1; % c
% размер скользящего окна
nW1=128;
% порог обнаружения пауз
hP1=0.2;
% максимальная погрешность обнаружения (отличие частот при обнаружении)
errorFr=10; % Hz
% частоты нот в октавах (дополнены нулями до 10):
OctavaFr=[
16.352 18.354 20.602 21.827 24.500 27.500 30.368 0 0 0 ...
32.703 36.708 41.203 43.654 48.999 55.000 61.735 0 0 0 ...
65.406 73.416 82.407 87.307 97.999 110.0 123.47 0 0 0 ...
130.81 146.83 164.81 174.61 196.00 220.00 246.94 0 0 0 ...
261.63 293.66 329.63 349.23 392.00 440.00 493.88 0 0 0 ...
523.25 587.33 659.26 698.46 783.99 880.00 987.77 0 0 0 ...
1046.3 1174.7 1318.5 1396.9 1568.0 1760.0 1975.5 0 0 0 ...
2093.0 2349.3 2637.0 2793.8 3136.0 3520.0 3951.1 0 0 0 ...
4186.0 4698.6 5274.0 5587.7 6271.9 7040.0 7902.1 0 0 0]';

% названия октав
Octavas(1).Name='Субконтроктава';
Octavas(2).Name='Контроктава';
Octavas(3).Name='Большая октава';
Octavas(4).Name='Малая октава';
Octavas(5).Name='Первая октава';
Octavas(6).Name='Вторая октава';
Octavas(7).Name='Третья октава';
Octavas(8).Name='Четвертая октава';
Octavas(9).Name='Пятая октава';

% названия нот
Notes(1).Name='До';
Notes(2).Name='Ре';
Notes(3).Name='Ми';
Notes(4).Name='Фа';
Notes(5).Name='Соль';
Notes(6).Name='Ля';
Notes(7).Name='Си';

% построить график (с номерами отсчетов)
figure('Name',['Сигнал (отсчеты)'])
plot(yS1)
xlabel('Отсчеты')
ylabel('Амплитуда')
title('Сигнал ')

% построить график (время, с)
xTime1=linspace(0,DurationS1,nS1)';
figure('Name',['Сигнал (с)'])
plot(xTime1,yS1)
xlabel('Время, с')
ylabel('Амплитуда')
title('Сигнал (с)')

% построить спектр сигнала yS1
% вычислить коэффициенты БПФ
nFFT1=length(yS1)
F1=fft(yS1,nFFT1);
% вычислить квадраты коэффициентов БПФ
F2=abs(F1).^2;
nFFT2=floor(nFFT1/2); % половина точек ДПФ
% вычислить частоты, соответствующие коэффициентам ДПФ
% fS1/2 - половина частоты дискретизации
frSpectr=linspace(0,fS1/2,nFFT2)';
% построить график энергетического спектра сигнала
figure('Name',['Энергетический спектр исходного сигнала' ])
hold on
plot(frSpectr,F2(1:nFFT2))
xlabel('Частота')
ylabel('Квадрат коэффициентов ДПФ')
title(['Энергетический спектр исходного сигнала'])
hold off

% построить график абсолютных значений амплитуд и порог
% (может быть использован для визуального решения)
figure('Name',['Модуль сигнала (порог пауз)'])
hold on
plot(abs(yS1))
plot([1,nS1],[hP1 hP1])
xlabel('Отсчеты')
ylabel('Модуль амплитуды')
title('Модуль сигнала (порог пауз)')
hold off

% построить график абсолютных значений амплитуд и порог
% (может быть использован для визуального решения)
figure('Name',['Модуль сигнала (порог пауз)'])
hold on
plot(abs(yS1))
plot([1,nS1],[hP1 hP1])
xlabel('Отсчеты')
ylabel('Модуль амплитуды')
title('Модуль сигнала (порог пауз)')
hold off

% признак - тип сигнала в предыдущем окне
Flag1=0; % =0-пауза, =1-звук
% порядковый номер создаваемого фрагмента звука
nSound1=0;
% пустая матрица для хранения номеров отсчетов фрагмента
FrameSamples=[];

% задать положения скользящего окна
k1=0;
while 1
k1=k1+1;
if k1 > nS1-nW1+1, break; end
% вычислить среднее арифметическое в окне
m1=mean(abs(yS1(k1:k1+nW1-1)));
% сравнить с порогом
if m1 < hP1
% обнаружена пауза
Flag1=0; % признак паузы
else
% обнаружен звук
if Flag1 == 0 % обнаружен новый звук
% создать новый фрагмент звука
nSound1=nSound1+1;
FrameSamples(nSound1,1)=k1; % начальный отсчет
FrameSamples(nSound1,2)=k1+nW1-1; % конечный отсчет
Flag1=1; % признак создания фрагмента со звуком
else
% фрагмент звука продолжается
FrameSamples(nSound1,2)=k1+nW1-1; % конечный отсчет
k1=k1+nW1-1;
end % if Flag1 == 0
end % if m1 < hP1
end % while 1

disp(['Количество обнаруженных звуков nSound1=' int2str(nSound1)])

% ==============================================
% === Отобразить области пауз
% ==============================================
% построить график сигнала с выделенными паузами
figure('Name',['Сигнал (паузы)'])
hold on
plot(yS1)
xlabel('Отсчеты')
ylabel('Амплитуда')
title('Сигнал (паузы)')
% выделить паузs
nEnd1=FrameSamples(1,1)-1;
plot([1,nEnd1],[0 0],'r','LineWidth',5)
for k1=1:nSound1-1
nBeg1=FrameSamples(k1,2)+1;
nEnd1=FrameSamples(k1+1,1)-1;
% выделить паузу
plot([nBeg1,nEnd1],[0 0],'r','LineWidth',5)
end % for k1=1:nSound1-1
nBeg1=FrameSamples(nSound1,2)+1;
plot([nBeg1,nS1],[0 0],'r','LineWidth',5)
hold off


% ==============================================
% === Шаг 3 Частотный анализ фрагментов звука
% ==============================================
for k1=1:nSound1
    disp(['=== Фрагмент k1=' int2str(k1)])
    % создать вектор фрагмента
    Frame1=yS1(FrameSamples(k1,1):FrameSamples(k1,2));
    nFFT1=length(Frame1);
    disp(['Длительность звука (отсчеты): ' int2str(nFFT1)])
    % вычислить коэффициенты БПФ
    F1=fft(Frame1,nFFT1);
    % вычислить квадраты коэффициентов БПФ
    F2=abs(F1).^2;
    nFFT2=floor(nFFT1/2); % половина точек ДПФ
    % вычислить частоты, соответствующие коэффициентам ДПФ
    % fS1/2 - половина частоты дискретизации
    frSpectr=linspace(0,fS1/2,nFFT2);
    % построить график энергетического спектра сигнала
    % для визуального решения
    % построить ограниченное количество графиков спектра
    if k1<=10
        figure('Name',['Энергетический спектр фрагмента сигнала k1=',int2str(k1)])
        hold on
        plot(frSpectr,F2(1:nFFT2))
        xlabel('Частота')
        ylabel('Квадрат коэффициентов ДПФ')
        title(['Энергетический спектр фрагмента сигнала k1=',int2str(k1)])
        hold off
    end % if k1<=10
    % определить частоту, соответствующую макс значению спектра
    [MaxF,iMaxF]=max(F2(1:nFFT2));
    frMaxF=frSpectr(iMaxF);
    disp(['Частота звука frMaxF=' num2str(frMaxF)])
    % классифицировать звук по значению его частоты
    % определить ближайшую частоту в октавах
    [MinfrOct,iMinfrOct]=min(abs(OctavaFr-frMaxF));
    % вывести информацию о ноте
    if MinfrOct > errorFr
        % большая погрешность классификации
        disp('Обнаруженный звук не классифицирован')
    else
        disp(['Номер ноты в списке всех октав iMinfrOct=' ...
            int2str(iMinfrOct)])
        % номер октавы
        nOct=floor(iMinfrOct/10)+1;
        % номер ноты в октаве
        nNote=mod(iMinfrOct,10);
        disp(['' Octavas(nOct).Name ', нота ' Notes(nNote).Name])
    end % if MinfrOct > errorFr
end % for k1=1:nSound1




























